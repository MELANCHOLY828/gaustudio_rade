GauStudio Documentation
===================================

GauStudio is a modular framework that supports and accelerates 
research and development in the rapidly advancing field of 3D 
Gaussian Splatting (3DGS) and its diverse applications.

|

.. image:: https://github.com/GAP-LAB-CUHK-SZ/gaustudio/assets/40767265/c7ae8183-583f-4467-ab67-e34c77c3bfd6
  :align: center

|

| Github: https://github.com/GAP-LAB-CUHK-SZ/gaustudio
| Paper: https://arxiv.org/abs/2403.19632
| Authors: `Chongjie Ye`_, `Yinyu Nie`_, `Jiahao Chang`_, `Yuantao Chen`_, `Yihao Zhi`_, `Xiaoguang Han`_

.. .. note::

..    Though this repo only contains examples for single scene optimization,
..    we believe generalizable NeRFs across multiple scenes can also be accelerate with our 
..    :class:`nerfacc.PropNetEstimator`. Examples will be added soon.


Installation:
-------------

Before installing the software, please note that the following steps have been tested on **Ubuntu 20.04**. 
If you encounter any issues during the installation on Windows, we are open to addressing and resolving such issues.


Prerequisites
~~~~~~~~~~~~~~~~~

- NVIDIA graphics card with at least 6GB VRAM
- CUDA installed
- Python >= 3.8

Optional Step: Create a Conda Environment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It is recommended to create a conda environment before proceeding with the installation. You can create a conda environment using the following commands:

.. code-block:: console

   # Create a new conda environment
   conda create -n gaustudio python=3.8
   # Activate the conda environment
   conda activate gaustudio

Step 1: Install PyTorch
~~~~~~~~~~~~~~~~~~~~~~~~

You will need to install PyTorch. The software has been tested with torch1.12.1+cu113 and torch2.0.1+cu118, but other versions should also work fine. You can install PyTorch using conda as follows:

.. code-block:: console

   # Example command to install PyTorch version 1.12.1+cu113
   conda install pytorch=1.12.1 torchvision=0.13.1 cudatoolkit=11.3 -c pytorch

   # Example command to install PyTorch version 2.0.1+cu118
   pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118

Step 2: Install Dependencies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install the necessary dependencies by running the following command:

.. code-block:: console

   pip install -r requirements.txt

Step 3: Install Customed Rasterizer and Gaustudio
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: console

   cd submodules/gaustudio-diff-gaussian-rasterization
   python setup.py install
   cd ../../
   python setup.py develop

Optional Step: Install PyTorch3D
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Usage:
-------------

Mesh Extraction for 3DGS
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. image:: https://github.com/GAP-LAB-CUHK-SZ/gaustudio/assets/40767265/ee6bf7ae-379b-4264-9065-2929f1654c9a
   :align: center

Prepare the input data
~~~~~~~~~~~~~~~~~~~~~~~~~

We currently support the output directory generated by most gaussian splatting methods such as `3DGS <https://github.com/graphdeco-inria/gaussian-splatting>`_, `mip-splatting <https://github.com/autonomousvision/mip-splatting>`_, `GaussianPro <https://github.com/kcheng1021/GaussianPro>`_ with the following minimal structure:

.. code-block:: none

    - output_dir
        - cameras.json (necessary)
        - point_cloud
            - iteration_xxxx
                - point_cloud.ply (necessary)

We are preparing some `demo data (coming soon) <coming soon>`_ for quick-start testing.

Running the Mesh Extraction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To extract a mesh from the input data, run the following command:

.. code-block:: none

    gs-extract-mesh -m ./data/1750250955326095360_data/result -o ./output/1750250955326095360_data

Replace ``./data/1750250955326095360_data/result`` with the path to your input ``output_dir``.
Replace ``./output/1750250955326095360_data`` with the desired path for the output mesh.

Binding Texture to the Mesh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The output data is organized in the same format as `mvs-texturing <https://github.com/nmoehrle/mvs-texturing/tree/master>`_. Follow these steps to add texture to the mesh:

- Compile the mvs-texturing repository on your system.
- Add the build/bin directory to your PATH environment variable
- Navigate to the output directory containing the mesh.
- Run the following command:

.. code-block:: none

    texrecon ./images ./fused_mesh.ply ./textured_mesh --outlier_removal=gauss_clamping --data_term=area --no_intermediate_results


BibTeX:
---------

If you found this library useful for your research, please consider citing:

.. code-block:: none

    @article{ye2024gaustudio,
      title={GauStudio: A Modular Framework for 3D Gaussian Splatting and Beyond},
      author={Ye, Chongjie and Nie, Yinyu and Chang, Jiahao and Chen, Yuantao and Zhi, Yihao and Han, Xiaoguang},
      journal={arXiv preprint arXiv:2403.19632},
      year={2024}
    }


Links:
-------------


.. toctree::
   :glob:
   :maxdepth: 1
   :caption: Dataset Interfaces

   apis/*

.. toctree::
   :glob:
   :maxdepth: 1
   :caption: Methodology

   methodology/*


.. _`vanilla Nerf`: https://arxiv.org/abs/2003.08934
.. _`Instant-NGP Nerf`: https://arxiv.org/abs/2201.05989
.. _`D-Nerf`: https://arxiv.org/abs/2011.13961
.. _`MipNerf360`: https://arxiv.org/abs/2111.12077
.. _`pixel-Nerf`: https://arxiv.org/abs/2012.02190
.. _`Nerf++`: https://arxiv.org/abs/2010.07492

.. _`Chongjie Ye`: https://github.com/hugoycj
.. _`Yinyu Nie`: https://yinyunie.github.io/
.. _`Jiahao Chang`: https://gaplab.cuhk.edu.cn/pages/people
.. _`Yuantao Chen`: https://gaplab.cuhk.edu.cn/pages/people
.. _`Yihao Zhi`: https://gaplab.cuhk.edu.cn/pages/people
.. _`Xiaoguang Han`: https://sse.cuhk.edu.cn/en/faculty/hanxiaoguang

.. _`Github README`: https://github.com/GAP-LAB-CUHK-SZ/gaustudio#readme

